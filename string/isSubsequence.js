/**
 * 判断子序列
 
 给定字符串 s 和 t ，判断 s 是否为 t 的子序列。
 
 字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。
 
 进阶：
 
 如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k >= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？
 
 致谢：
 
 特别感谢 @pbrother 添加此问题并且创建所有测试用例。
 
  
 
 示例 1：
 
 输入：s = "abc", t = "ahbgdc"
 输出：true
 示例 2：
 
 输入：s = "axc", t = "ahbgdc"
 输出：false
 
 * 思路：双指针
 * 1. 定义两个指针，一个指针指向第一个字符串的第一位，一个指针指向第二个字符串的第二位
 * 2. 当匹配成功一个，第一个指针右移，第二个指针持续左移
 * 3. 当全部匹配成功，则第一个指针所在位置等于字符串s的长度
 */
var isSubsequence = function(s, t) {
	let
		sLen = s.length,
		tLen = t.length,
		i = 0,
		j = 0
	while (i < sLen && j < tLen) {
		if (s[i] === t[j]) i += 1
		j += 1
	}
	return i === sLen
};
